{"podcast_details": {"podcast_title": "DevDiscuss", "episode_title": "S9:E8 - How to Introduce Coding to Your Kids", "episode_image": "https://dev-pods.s3.amazonaws.com/devdiscuss_cover_art.jpg", "episode_transcript": " parents don't fully understand that being a technologist or a coder, there's so much overlap these days with being an entrepreneur and how everything is kind of ingrained. Welcome to Deb Discuss, the show where we cover the burning topics that impact all of our lives as developers. I'm Ben Halpern, a co-founder of Forum. And I'm Abby Phoenix, special projects manager at Forum. And today we're talking about introducing your kids to coding with John Mattingly, co-founder and CEO at Codable, and Pete Ingram Couchy, CEO of Ivy Tech. Thank you both so much for being here. Thanks for having us. Thank you so much. So before we get talking about the youth, let's get a little bit about each of your career backgrounds. John, can we start with you? Yeah. So I started the company that became Codable in college. I had actually started coding myself when I was about six. And then did some other things, was kind of a closet nerd, I played football. And then in college, I knew I wanted to start a business real quickly, it became apparent that I didn't want to be dependent on someone else to build my dream for me. So I decided to teach myself, went to my academic advisor, said I needed two more years of school to switch my major to CS, I was a business major. And I was like, no, screw that, I'm not spending two more years in school, I hate it school, I couldn't be done soon enough. So ended up just deciding to teach myself again, picked it up really quickly, got a job as a software engineer right out of college. I graduated with a degree in marketing on a Friday, started coding on a Monday. So did that. And then within six months, I quit to work on Codable full time, and I've been doing it ever since. Wow, that's a really cool path. That's not what I expected. But Pete, I'd love to hear you talk a little about your background as well. My story starts in 99, where we launched the company, we started teaching technology to kids in a summer camp venue at Santa Clara University. And the reason that we started is my parents were both educators. And I remember the conversation with my dad, he's like, Hey, what's all this computer stuff? Like, we're trying to teach math, and we're trying to teach English, but like, all the kids are talking about this computer stuff. So we started what we coined a computer camp. It's evolved into, you know, tech camp, and we teach, you know, an array of like, really awesome STEM topics today. But it all started with the concept of providing a really great immersive hands on experience for the kids. And things blossomed from there. But we started back in 99. And my dad, my mom, my sister was a family startup with no funding. So it can be done. We started with, you know, $0 and built the company into a multinational company. And, you know, we've got over 50,000 kids a year who attend the program. So it's really fun. That's incredible. John, can you get a little bit more into Codable? You know, you sort of mentioned the context, which led to it. But what about the nitty gritty of why Codable and how it all came to be? One of the things that is core to, I guess, Codable's thesis, and one I didn't realize that I was living myself is that kids are able to learn how to think very early on. And the older you get, the harder it is to learn how to think. So you hear this with languages a lot, right? Like, it's a lot easier to learn another language when you're younger than when you're older. And the same thing is true for coding. Because whereas a normal person might think of coding as, you know, a bunch of code on the screen and syntax and all of this, it's really just a different way of thinking. And we did a lot of research when we were first starting Codable that said, you know, a lot of your brain stops learning how to think by maybe about 12 years old. Research is always evolving. But a lot of it says, like, very young, you stop learning the skill to think. And if you look at a lot of the really good programmers, a lot of the famous programmers, a lot of them will tell you that they were exposed to CS very early on. And I was, I don't know if I'm famous, but I was one of those fortunate people. So we saw an opportunity there where we could give other kids that exposure. And at the time we started Codable in 2012. And at that time, there wasn't really much out there. And there definitely wasn't anything that was very pretty. It was very accessible to kids. There was a lot of stuff built by programmers and programmers are just not artists. Luckily, my co founder was and we thought we could do better. We started working on it over the summer of 2012. And we've been just continuing to improve on it ever since. So 2012, there wasn't much out there. Why do you think that is, you know, why, why is something so fundamental as the notion of teaching children some code, which, you know, regardless of how you go about it is probably not such a controversial idea, or, you know, like, it's appealing on some level to probably a lot of parents. But why is it still not such a ubiquitous idea? And in 2012, they're in your mind, there wasn't even really much out there at all. I think we were just starting to really bring technology with us every day, up until really the iPhone and smartphones became ubiquitous. Technology was something you went to, right, you go to your desk, you go to your office, you get to your computer, you log in. And when you're done, you leave, you have an Xbox, you have a video game system, you sit on your couch, you play it. And then when things like the iPhone came out, we started to see all parts of our day or technology, you know, today, you scan a QR code to look at a menu, your menu is technology now. And I think up until technology really started to invade everyday life, it was just seen as another skill, like a nursing or a doctor or a firefighter, or anything like that is something you go to and you do. So most people didn't see the importance, but now people see it everywhere and they see it all the time. And I think the other big one is that around that time was when a lot of really big web based tech companies were started. So things like Microsoft had been around for a long time, and those are software, but on the web, you had Facebook, Google, Apple, they were getting really big right around those times and on the website. And they were starting to pay really, really well. They were looking for software engineers that were very skilled and it was very hard to find it because like I mentioned, a lot of people were not getting this exposure when they were really young. So they started paying ridiculous sums of money. They're still paying ridiculous sums of money to find these really skilled software developers. And I think when you combine those two things where you're seeing technology every day and the people that build that technology are making a lot of money, you get that critical mass where people start to see the importance in it. And so I'm curious then hearing John, as you're talking about that, Pete, you mentioned that your company has had quite a history, has been working in STEM education for decades now. Can you talk a little bit about if you have seen that shift in focus and a subsequent shift in STEM education, tech education that has to go with the ubiquity of tech being all with us all the time now, especially in kids' lives? Yeah, there are so many stories that are interwoven. It's a super fascinating topic. I think part of the issue too has just been basic branding because when you say coding to a lot of moms and dads who weren't really familiar with the lingo, it can be a little scary and they don't know how to guide their kids. So sometimes I think there is some potential bias from parents because they don't fully know or understand the power of a lot of these STEM topics that IT tech is teaching and that Codable is teaching and the benefits it can have, obviously in the job market, getting well-paid jobs, but also very, very fulfilling jobs as well. We're seeing kids come through that are not just working for the Googles and Microsofts and metas of the world, but they're becoming entrepreneurs and parents don't fully understand that being a technologist or a coder, there's so much overlap these days with being an entrepreneur and how everything is ingrained. I wish I was a developer. I'm not. I studied entrepreneurship in college and business and I've been able to scale my business and hire incredible, incredible talent that's shaping the future. And we really believe that, but it's such an important skill to have. It is, I think, John, to your point, speaking another language and the world is just wide open to you if you develop these skills. So the potential is so big. And I think I kind of circle back that a lot of this has to do with marketing. I remember what was like 10, 15 years ago that Code.org came out with their video with Shakira and a couple of others to kind of create that pizzazz. Bill Gates was in that video as well. And that was kind of an important point as well, because we're trying to make this more mainstream. We still got a lot of work to do, certainly at the school level. I mean, we're partly in business because schools just have a tough time keeping up with the basic math and reading literacy, let alone the changing technical environment that's just unfolding. Can we maybe just touch on the unhealthy ways this can go if approached in the wrong way as a parent? So if I'm a parent of a five-year-old and I'm interested in getting them to code, but I'm thinking job market, setting them up for success, is there anything particularly unhealthy about the way that can go if a parent is too overexcited about getting their children into valuable skills early on? Parents having overbearing expectations of their children having a high-earning job has been around a lot longer than computer science. That's true. We've had doctors and lawyers and everything else for hundreds of years. So I would agree that on a macroscale, you don't ever want a parent to be overbearing and force their child to work really hard to do this. But I think honestly, the biggest difference I would see, I'm definitely biased, is if you are a parent that really wants your kid to be a lawyer and you're pushing them to be a lawyer forever and they hate it, they hate it. Most lawyers hate it. So it's no mystery. They just don't like it. If you decide to drop out of that, what carryover does that have to other subjects? What carryover does that have to other career paths? It has a little, but not a lot. If you're going into coding, you're learning skills that aren't just going to be making you successful with computer science related jobs. You're learning things like problem solving. You're learning perseverance. You're learning being able to hold your attention and focus on something for more than 10 seconds, which is a huge problem in the world today. I absolutely agree. You shouldn't be overbearing and you shouldn't push your kids to do something they don't want to do. But I think it's going to prepare you for other things. It's going to prepare you for other careers. You're just going to be a more successful human being with the skills that this kind of stuff gives you, especially at the ages that we're dealing with. Nicole Zilberbourg And Pete, would you agree, do you think there are some fundamental things about specifically computer science education that are really helpful for kids in other arenas as well? Pete Slauson Absolutely. The cross pollination is huge. And what we see in our camp settings, both the in-person settings and online settings is we take for granted the concepts of the ability to work in teams, the ability to both work independently, overcome your problems and keep going, not get stuck, but keep going. And it's kind of dovetails, I think, into the conversation of the implications of COVID and what's happened when so many kids were working on the Zoom calls, going to Zoom school, et cetera. And they actually, I think so many kids took a step backwards because they weren't able to collaborate in that setting. And so there's some lessons here that, even preparing the next generation of the job force, we've got some catching up to do. It's all interwoven. And it's really important. I think these skills are absolutely transferable. Something I tell my own kids is you don't have to be a coding rock star, but get a foundation, be able to speak the language because so many of your peers, you're going to know this stuff. And it's kind of like, you're going to travel to South America, even if you're not perfectly fluent in Spanish, to be proficient in it, you can get around, you can get around on the subway or whatnot. It's a skill and it's helpful and it's absolutely transferable and it'll help you in life. You've both touched on COVID and clearly with technology and with kids, as you were saying, it's been a huge factor in both us all realizing how much we depend on technology for those connections, as well as for kids specifically. So many of them, I had at that point a five-year-old who had to learn how to use Zoom. And eventually, before long, got way better at it than I am. So that speaks a little to how quickly they pick those things up. I would love to hear for both of you, the work that you do, did you find that you had to make any major shifts due to the pandemic happening and all those effects and the fact that in a lot of ways, it really seems like a lot of those changes are kind of here to stay? Well, if you look back to when the pandemic started, the beginning of 2020 really was for us, it became really palpable in April. I kind of correlated with, we were like a cruise line because we had in-person programs happening on college campuses throughout the world. So imagine 50,000 kids, you wake up one day and then boom, you have to shut everything down. We physically couldn't teach on those campuses. So we had to pivot our entire business to online in like 72 hours. Thank goodness we had the team to do it and the technology to do it. You could not have done that 20 years ago. Things have moved very fast. So we were able to stand up and give kids something. It was a different experience. It wasn't in-person, but it was a good experience. And we created a whole category called virtual tech camps. That had never really been done before at scale. And we brought thousands and thousands of kids into the program and we were able to salvage part of the summer. What's happened since then is I think pendulum swing really, really far. So we went from a hundred percent in-person to a hundred percent digital all within the span of a very, very short amount of time. And now the pendulum is swinging back toward the middle and we're going to be a very robust hybrid program. I believe if a student wants to learn online, great. If a student wants to learn in-person, great. We'll put out programs and meet the students where they're at, where they want to learn. What's most important for us is like we have staff that students can relate to and learn from and that we're creating like this space where they can really learn these valuable skills in a very fun way. So they're not turned off to it, not overbearing, kind of like part of the previous conversation. Because if you overdo it and they have a really bad experience like in anything, they're probably not going to keep doing it. So it's a big responsibility, I think for all of us that are trying to train up the next generation. Absolutely. It has to be fun. They have to want to do it, right? Got to make it fun and it's not always fun. Yeah. Right. So you have to make it fun. And that's part of, I think, the experience of learning with others and the collaboration and the failing together and the laughing about it and the resiliency of that you keep moving forward and then you solve it, right? And then when you reach that aha moment, it's really incredible and you keep moving. For us, I think we had a bit of a different experience in that the vast majority of our users are in schools. So for schools, March of 2020 was a pretty scary time. They shut down with almost no notice. We were hearing stories about how teachers were like cutting the power keywords off of the Chromebooks because they were locked and they were just like handing them out to the kids because the schools got shut down. You're going home. We don't know when you're coming back. And they're just trying to give kids technology so they can do stuff because not every kid has a computer at home. So that was a wild ride for us. But in terms of our product, we were really fortunate because since we're a coding tool and coding isn't taught with the kind of structure in schools that something like math or ELA is, we've always had to make Codable really flexible. So we built it from the ground up to where a teacher could use it every week in structured lessons, could do it once a month, could do it in centers, whatever they wanted to do, Codable would work. So we were really fortunate that there wasn't that much that we needed to do to make it work remotely. I think the big thing for us was getting the teachers to understand how it all worked remotely. And I think that's going to probably be the biggest lasting change we see. I'm still very much in favor of kids learning in person in the classroom. I think it's very important. But the teachers were forced to learn technology. They were forced to understand the tools they were using and they were forced to value technology. Change only happens when it's forced. And I think it forced a lot of teachers that were kind of clinging to some older ideas to really come into the 21st century. We're seeing a lot of teachers that don't have that same fear. That's kind of what we've been touching on is this fear of computer science and coding. They don't have that same kind of fear because they had to change. They were forced to change. And I think that's going to be a boon for students for hopefully forever. Let's shift gears into some of the details of how each of your organization effectively gets kids of different ages into coding and interested. What are the actual techniques for accomplishing this? For us, we focus much more on the thought processes behind computer science more than we focus on teaching them actual code. So there is syntax and kids will be exposed to code inside of Codable. What we're really trying to do is teach them how to think like a programmer, how to think logically, how to be able to do things like say if this happens then that cause and effect. And that's a real easy transition for a lot of people because if you take it away from coding, this is stuff everyone understands. If this then that, like logical thinking, whether or not you're a coder, you understand those things. And coders understand this. Like those are the building blocks of computer science. We've really focused on doing it that way. Everything that we do is delivered through a game. We really, really believe that that's the best way to teach a young kid. That's the best way to teach young kids and keep them engaged. When we first started, it was very unscientific. It was me as a self-taught coder and my co-founder, who was not a coder, sitting in a room together trying to translate coders speak to something an average person would understand. It's gotten a lot better. But for someone that's been a lifelong software engineer, it's very hard for them to understand how to not understand computer science, how to think like someone that doesn't understand coding. So you get these problems where the typical computer science textbook, first chapter, all nice, walks you through everything. Chapter two drops you off a cliff. And it goes straight into these super complicated concepts. I dealt with these same things. And it's awful. So what we would do is we would really put our heads together and think about what are these building blocks? What are the core concepts that are in most, if not all, languages? What are the thought processes behind it? And how can we make a game that teaches those things? How can we make something that's going to be fun for kids? It's also going to force them to use these skills. And a game is even more fitting to computer science because it's literally built with code. So a lot of times there's a lot of crossovers. So when we were teaching object oriented programming, and we started teaching that, we used a tower defense game. If you've ever played something like Plants vs. Zombies, the analogies are very clear. It's very easy to see the connections between these things. So it was very easy for us to make those connections. And from there, yeah, it's a lot of focusing on making it really fun. Our core philosophy of Codable is if we have to choose between making things a little more educational and less fun or a little more fun and a little less educational, we're always going to go on the more fun side because we're dealing with five-year-olds. They don't have to build Facebook tomorrow. And we've worked with educators now. We have educators on our team. But to start, a lot of it was just throwing it against the wall, seeing what sticks, testing with kids, and just translating it all on our own. And this happens within the schools, right? So administered to them by their teachers? Yes. So like I mentioned, Codable can be used a few different ways depending on the teacher. It can be everything from a weekly curriculum. We have a scope and sequence, lesson plans, all of that. It can be used as just a free play activity. We see a lot of teachers, they'll do that in free play. Sometimes they'll even do it in like math labs or math centers time. It really depends on the teacher. It's also used at home. But just because there's so many kids in schools and there's so many schools that use Codable, a large amount of it is used in the classroom. It's kind of interesting for me because you've got the Codable demographic, which skews younger. It's almost like they're graduating two other programs. So at ID Tech, we kind of built the name ID Tech Camp. So kids would come to a university as young as age seven. So we go from ages seven to 18. And they learn amazing topics. We partnered with, like develop curriculum with, if it's Nvidia, or with Google. That has a little bit of that cache for the kids too. They want to learn something like, it's not just coding, it's coding with Minecraft, or it's not just a basic line of code. It's doing it with Roblox or whatnot. Right? So that gets the kid excited, but it also brings home the value for the parents. And then we want to create that setting, but it's all wrapped and delivered by our staff. We call them tech rock stars. And it goes back to that fundamental point about making it fun. The kids can relate to staff members who are, most of our staff are undergrads at Carnegie Mellon or Stanford or Caltech. And they're the same places where we host our camps. So they get a taste of the college campus and they get to learn from these mentors who are like either in college or who have recently graduated and gone on to work for big tech companies, et cetera. So it's just, so much of it is like creating that environment that is like really welcoming. So many parents, when I talk to them, they're like, we just don't know where to get started. Just take the first class, just get started and see if it's fun. See if it's right for your kid. You might be actually really surprised that they take to it, but if you've never tried it, you'll never, never know. So just take the first step and get moving. I mean, it's great to see you like what Codable is doing at the school level. And there's so many different ways to learn these days online in an in-person setting, at camps, after school, et cetera. So it's a really exciting time. It's much more accessible today than it was 20 years ago. I am curious, you know, in your experiences, what you have found, and maybe this differs by the age group, but what have you found to be the most challenging part of teaching young people, you know, these particular skills? Because I think most people would agree who are coders who do some development, that it can be a very frustrating thing as well. So what have you found to be kind of the challenges that kids come up against? I think like there's this idea that in a week's time, you're going to become a professional coder. Right. When kids come to us for camp, like we like to deliver like how the kids kind of like work toward a project at the end of each week. So to the naked eye, what the student has created may not look like, you know, that video game Fortnite that they're playing at home. But the logic behind it and the learning that happened in a week's time is insane. I think getting that messaging out that learning to be a very proficient and then an excellent top programmer, that takes years. So that patience level when, you know, the kids are on their phone and they want that instant gratification, they want to get really good at something in a very short amount of time. So it's the time and the patience to really become a professional and to like build a love of the craft. And that happens over time with failure and perseverance. It's all those other kind of skills that we talk about. Sometimes we talk about coding, but it's all intertwined with all the other stuff that you've got to do to develop that passion. You know, you become a great soccer player over the span of years, not over the span of days or hours. It's the same with anything. And so I like to correlate coding with sports. We use those analogies all the time. We've all talked about that 10,000 hours, like to get really, really good at something, it takes a while. So it's the patience and the perseverance that happens over time. That totally makes sense, especially if they're seeing, like you said, they're playing Fortnite all the time. They're seeing all these things that are like, no, but like, I want to just make that. What about with younger kids? Are you seeing some of the same challenges? I mean, we run into some of the same things. I think attention span is always an issue with younger kids, especially five year old, you don't get them for more than 20 minutes on anything. I've noticed on a smaller scale, smaller than you would think, persevering with problems, typically in any, whether it's at home or in a classroom, in any like 20 ish minute period, you'll get one or two kids where they get frustrated and they just quit or they just stop. I don't necessarily see that as a bad thing because you're learning a skill just like anything else where you're learning how to persevere. You're building those muscles to really drag the sports analogy even further. You're building up your grit muscle, if you want to call it that. The first time it's not going to be easy. You're going to hit a roadblock and you're not going to have that strength built up. You're going to quit. You're going to give up. Five year old, this is going to happen, but you have to encourage that and you have to keep it going. On the kid's side, those are, I think, healthy challenges, but on the, I won't be 100% honest, I think the problem happens more on getting more adults to buy in and encourage their kids to do it. An elementary schooler is not really in control of their time, especially kindergarten, first, second grade. I think when you get up to the age's piece dealing with like, you know, upper elementary, middle school, they can choose what games to play. They can choose what things to do. When you're in kindergarten, you're not really choosing much. Your parents are choosing that for you. Your teacher's choosing that for you and getting adults to see the value in this on both sides, whether the value in this over learning social studies or alongside learning social studies. And then on the flip side, that this isn't just another game you play. Like you're actually learning something. We'll hear a lot. It just looks like they're playing a game and you can spend the 10, 20 minutes explaining that to them. And then once you explain that, they can see it, but it's hard to scale that to tens of thousands of adults. Right. So getting more people to really buy into this and really push their kids to do this. And then if they get frustrated, giving them that extra helping hand, giving them that nudge, no, don't just quit and go watch Peppa Pig or whatever else it is you're doing. Actually go back, come on, go back, try again. Let's work through this together. Give them that support. That's probably the biggest challenge for us at the younger ages. I don't know about you, Joe, but how many times have you heard, it's just not for her. She's not going to like it. I get it a lot. We hear it over and over and over again. So I was speaking a little bit to that bias. It's like, we have to overcome that. And that does go back, I think, to the adult. We're influencing where our kids spend their time. And we say it a lot too. We'd much rather have the kids creating rather than just consuming. And I think that we provide that opportunity, but you got to get your kid in that door, just expose them and let them be part of that decision-making process. Because you don't really know. They can be good at sports and be good at coding. You don't have to be good at one and not the other. The world that we're living in, I tell my son, he loves soccer, he loves sports, but data science and statistics, you start thinking about all the stats that you're seeing on ESPN. There's a lot of technology behind that. And then we get into AI and machine learning. And it's like your head, just like the opportunity is so big. So we got to get these kids to cross over. You can do music, not or, but and. And it's all blending together anyway. Before there were these like perfect delineation sports is over here and music's here and tech's here. And now it's becoming this big integrated blob. And that's really exciting for the people that go after it. So you got to get your kids into to give them a shot to see. But we also have to be good storytellers as well. I don't think that, you know, we probably haven't done our best about letting the kids realize what they could become. Like what could this actually do? It's somewhat nebulous to like tell that story. Oh, lines of code. Where can that actually lead? So that's a challenge is the storytelling. So I grew up playing a lot of sports. One of the hardest things I had in my coding interest was actually just making friends with other people who had that same interest. Depending on the environment, I had a hard time finding myself in a coding environment where I found myself able to make friends, you know, so like the social component is sort of what kept me closer to the sports than the coding sometimes when I would have been happy like splitting my time equally, if anything. Yeah, wondering about how that maybe has changed or if if that changes a little bit when you have the context of really teaching more kids how to code and then maybe they find more friends who might want to code with them instead of it being this kind of something for just the kids who get into it and then you know they're surrounded by like other kind of self selected kids who get into it instead of being put in a space where there's better friendship opportunities. Anyway, I'm curious about that whole dynamic of helping kids find like friendship and sticking around and doing the whole thing, you know, with kids that they really bond with. I do know that's definitely changed a lot in the past 10 years. I think when we started teaching it in schools and we stopped teaching it in the way it was traditionally taught with, you know, a bunch of people in a room trying to write code in like a dark room in the corner, you know, something like you think about the typical hacker situation, right? That wasn't really accessible to many people. Now you have everyone learns coding. You've got boys learning coding, you've got girls learning coding. That was a big part of it. My co-founder didn't take a CS class in high school because she would be the only girl in the classroom and now you have a whole class. So whatever the demographic of your classes, that's who's going to teach coding. They're not just making an elective in the corner. I think I know for me as a high school boy, if there were girls in the class I wanted to talk to, I probably would have taken it too. So that's made it a lot more accessible on a larger scale than it has been before. I think just because it's just become sexier. I think that's what code.org did really well when they first launched is Hathi and everyone over there, they had a lot of connections with a lot of really famous popular people and they used those connections to get them to start endorsing coding. And when you have that and the kids see, hey, these cool people like coding, then I can too. It's not just this thing that the nerds and the losers do and no one knows what they're doing and they're just kind of weird in this corner. It's everyone doing it, which I think is healthier for the whole industry. I think that anybody who's paid attention to the tech space knows that traditionally programming as a career, as an industry, it's very male in the US, it's very white. And there has been subsequently a large push to get more girls into coding, to get more underrepresented groups into coding. Do either of your programs have any sort of acknowledgement that we want more of these groups in this industry because traditionally it has been a very male, very white industry? Yeah, this is a subject that really goes deep into my core, into our organization. So my sister and my mom, they were the original founders of ID Tech. I came in a couple of months after we launched. And what we noticed back then was, wow, there just aren't enough girls coming to the programs. And you fast forward five years, so it's about 2005, still not enough girls. And then you start paying attention to the data points. At the university level, there are about 14% of undergrads are actually female. That's a really daunting stat. Just to clarify, you're saying 14% of computer science undergrads? Of computer science undergrads are female. Back then we had a lot of work to do. So I have this really fun story. So Susan Wijcicki, she's the CEO of YouTube. She sent her kids to our camp. And she called my sister and I, and she said, hey Pete, how do we get more girls into your camps? Because what we're seeing at the college level is like right now, she said, what percentage of your campers are female? And at that time it was 12%. And this is right around 2009. And we said, okay, about 12%. She's like, well, that's about what it is at the undergrad level. So if what you're doing at this level, this young age cohort, if it's the same, nothing is changing. So we actually went into her, she was with Google at the time before she took the reins at YouTube. And we drew up a game plan and we'd launched something called Alexa Cafe, which was a girls only program. And we expanded it nationally and we retooled the curriculum. We retooled the branding. We retooled some of the projects at the end of the week that we thought would be more interesting to the girls. It wasn't like, you know, some boys might want to do like first person shooters. If they're going to make a game, that might be their bias. Girls might want to do something different. And so over the years, we really took that lesson. And now over 30% of our total population is female, which is, it's not 50-50 parity yet, and it's still going to take some time. But we really had to work on messaging and being a very, very inviting place to come to get started. So an interesting tidbit is if you look at computer science in the 1950s, it was majority women. Look at there's someone named Grace Hopper, who's considered like the godmother of computer science, rear admiral in the Navy. Originally, coding was done by women because it was seen as a lower skill thing. And that was one of the careers they could get into back in the 50s. So for us, I don't think there's any like doubt as an ability thing. It's a pipeline problem. And I've actually written about this before. I believe a large reason for this is because from a very young age, boys are pushed towards things like Legos and blocks, and girls are pushed towards things like Barbies. And they learn to develop the skills associated with that. Now that's changed. That's changed a lot even in the past 10 years. And for us, we actually we've done research on this, the demographic split of kids using codeable is actually higher for girls and boys, because it's done in a classroom. And at the age that they are at, no one has ever told them they can't do it. They don't see race, they don't see gender the way that we do. They don't see any of that. They want to code. They don't think that it's not the cool thing to do. They don't think it's not the popular thing to do. They think, oh, this is a fun game, we want to play it. But the one thing we will do, and it's something we've been pretty conscious and cognizant of the entire time is making a gender agnostic program. We don't agree in designing specifically for one or the other. So what we'll do is we'll make sure that whenever we're making a new game, whenever we're making a new costume for a fuzz or a new level for kids to play, my co-founders female, I'm male, we have women on the team, we have men on the team. If we're designing something, we want to make sure that it's equally appealing to both. And sometimes our lead artist is a man and sometimes he'll make very techie, very boyish designs. And we'll have to take a step back from that and try to make something that appeals to both. Because I think a lot of the issues we're seeing, and this is something that has been studied in great detail, is when you get to the professional level, it's a pipeline problem. There's just simply not enough people interested in that. And our job at the ages that we're dealing with is to make sure that pipeline stays as open as possible for as long as possible. What about when a girl is introduced to code and she takes to it and some of these like social constructs are introduced to her later and might cause her to question whether it's for her even if she's a great programmer, even if she takes to it well, you know, like are there issues with kids as they get older, like, you know, thinking of themselves being more aware of a stereotype that they should or shouldn't conform to or anything like that? Is there like a need to sort of combat some of these pressures? For us, at least, if they like it, they're gonna keep doing it. And I don't, I don't, I really do think that those kinds of stereotypes, while you hear these stories on the news, and they really like to push it in a day to day world, they are starting to go away. There has been so much that's been done over the past 10, 15 years, I've been at the forefront of all of it, to make sure that everyone can feel welcome and everything. And on a company by company basis, that obviously varies. But as long as you develop that interest early on, if you make someone love something, I know for me, like, I loved playing football, I didn't care that I was short and white, I wanted to play football. And I didn't let anyone tell me otherwise. So I played and I'm gonna be playing in college. So you have to foster that love early on and build as much strength and conviction in what they want to do as possible. And I agree, there's things that could affect that later on. But there's only so much like we can do at some point, you just got to say, no, I'm going to do this anyway. I do think there's a lot of effort being made to make sure people know that they can do that. I love what you said, because this is kind of finding their tribe, if you will. And I think that tribe is getting bigger. And they're going to be able to push past it. I don't think like coding and technology, like it doesn't really have that kind of negative connotation anymore, we're like, this is where the nerds hang out, like, it's cool. And like I said, before, you can do this and do that. And they also see it through the lens of, you know, kids are pretty darn smart. And they know, like, who's making their technology, who's building it, who's designing it. And so these are the tech rock stars, right. And I think that there's, you know, some of the best like technologists at our camps, like the kids, they are the rock stars of the camp. And so the other kids aspire to do that. And it kind of like, I think crosses over any racial issues, any gender issues, it's just like, no, they're just thinking technologists, they just love this stuff. And it's a passion of theirs. And who I want to be like that. And frankly, like those kids that have all that curiosity, and they develop that passion, the love, like, they're writing your ticket. And that ticket, like that foundational ticket is being written at age, you know, nine, 10, 11. It really is no different than the sports analogies. Do either of you just as we finish up, have any last thoughts about any particular, you know, additional resources that you might share for those who might have kids that they want to get interested in coding, obviously, of course, checking out Codable, checking out ID Tech, but are there any other things that you would recommend for anyone in that position? How about you start with ID Tech and Codable? In addition, I have a few kind of standard things I recommend. Pete mentioned them, I mentioned them, code.org does have a lot of resources out there that for all different ages, you know, Codable is only elementary school, code.org does a great job at providing an introduction to all levels. Another resource that really helped me if you're an adult, the headfirst book series, I tried to do all the online tutorials for a little while, admittedly, a long time ago. And I couldn't really build much of a foundational knowledge. And I went through one of the headfirst books, it was headfirst C sharp. This was actually my first real language that I learned and a lot of their philosophies around not dropping you off a cliff and trying to make coding education accessible were translated into Codable. That's how I learned and that's how I felt like a lot of other people could learn. And I think the other thing that I like to tell everyone, while it's not a specific resource, is the key is consistency. Doing it 10, 20 minutes a day, don't try to carve out four hours a day, once a week, 20 minutes a day, every day is going to be your best bet. Just do a little bit all the time consistently, find something you want to do, find a project. You don't just code to code, you have to find something you want to build, you have something you want to do, find a project you want to do and just be consistent with it as long as possible and you're going to be able to pick it up. And that goes for any H range. It also seems like really good advice, not just for coding, just for learning anything, really. This is true. Absolutely. I think you tied it off really perfectly. Practice makes perfect. And the best teacher is doing, frankly, right? I mean, a teacher can help you, guide you, help you overcome. And I think that's an absolutely important part of it. But just get in there and hopefully the blending of learning from a great instructor, but also being a little bit self-guided as well. That's just the perfect mix. So you can tinker and learn on your own time as well. But you got to get started. And I think that's a really fundamental point. Get going and you never know. This could be that passion that so many parents are like, my kid's got to find that passion. This could be it. You got to give them a chance. Thank you so much, both of you for joining us. Thank you. Sure. This was fun. Super fun. Thank you for listening to Dev Discuss. This show is produced by Gabe Segura. Our senior producers Levi Sharpe, editorial oversight by Jess Lee, Peter Frank and Saranya Barak. Our theme song is by Slow Biz. If you have any questions or comments, email pod at dev.to and make sure to join our Dev Discuss Twitter chats on Tuesdays at 9 p.m. Eastern Time. Or if you want to start your own discussion, write a post on Dev using the tag discuss. Please rate and subscribe to this show on Apple podcasts."}, "podcast_summary": "The podcast discusses introducing kids to coding and the challenges and benefits of teaching them this skill. The guests, John Mattingly and Pete Ingram Couchy, share their career backgrounds and talk about their organizations, Codable and ID Tech, respectively. They highlight the importance of teaching kids how to think like programmers and how coding can enhance problem-solving and logical thinking skills. The hosts and guests also discuss the impact of COVID-19 on tech education and the need to make coding more accessible and fun for kids. They address the challenge of overcoming stereotypes and biases related to gender and race in the coding industry. The episode concludes with recommendations for resources and emphasizing the importance of consistency in learning.", "podcast_guest": {"name": "John Mattingly", "summary": ""}, "podcast_highlights": "- John Mattingly discusses how kids are able to learn how to think at an early age and how coding helps develop those thinking skills.\n- Pete Ingram-Couchy talks about the importance of making coding accessible and fun to kids, and how it helps them develop skills like problem-solving and perseverance.\n- John and Pete discuss the challenges of teaching coding to kids, such as attention span and the need for patience and perseverance.\n- Pete discusses the efforts made by ID Tech to encourage more girls to get into coding and the importance of creating an inclusive environment.\n- John emphasizes the importance of consistency and regular practice in learning how to code, and recommends resources like code.org and the Head First book series."}